/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of running an advanced virus scan on cloud storage
 */
public class SwagCloudStorageAdvancedVirusScanRes implements Swagger.MappedProperties {
    /**
     * True if the operation of retrieving the file, and scanning it were successfully completed, false if the file could not be downloaded from cloud storage, or if the file could not be scanned.  Note that successful completion does not mean the file is clean; for the output of the virus scanning operation itself, use the CleanResult and FoundViruses parameters.
     * @return successful
     */
    public Boolean successful { get; set; }

    /**
     * True if the scan contained no viruses, false otherwise
     * @return cleanResult
     */
    public Boolean cleanResult { get; set; }

    /**
     * True if the scan contained an executable (application code), which can be a significant risk factor
     * @return containsExecutable
     */
    public Boolean containsExecutable { get; set; }

    /**
     * True if the scan contained an invalid file (such as a PDF that is not a valid PDF, Word Document that is not a valid Word Document, etc.), which can be a significant risk factor
     * @return containsInvalidFile
     */
    public Boolean containsInvalidFile { get; set; }

    /**
     * True if the scan contained a script (such as a PHP script, Python script, etc.) which can be a significant risk factor
     * @return containsScript
     */
    public Boolean containsScript { get; set; }

    /**
     * True if the scan contained a password protected or encrypted file, which can be a significant risk factor
     * @return containsPasswordProtectedFile
     */
    public Boolean containsPasswordProtectedFile { get; set; }

    /**
     * True if the uploaded file is of a type that is not allowed based on the optional restrictFileTypes parameter, false otherwise; if restrictFileTypes is not set, this will always be false
     * @return containsRestrictedFileFormat
     */
    public Boolean containsRestrictedFileFormat { get; set; }

    /**
     * True if the uploaded file contains embedded Macros of other embedded threats within the document, which can be a significant risk factor
     * @return containsMacros
     */
    public Boolean containsMacros { get; set; }

    /**
     * For file format verification-supported file formats, the contents-verified file format of the file.  Null indicates that the file format is not supported for contents verification.  If a Virus or Malware is found, this field will always be set to Null.
     * @return verifiedFileFormat
     */
    public String verifiedFileFormat { get; set; }

    /**
     * Array of viruses found, if any
     * @return foundViruses
     */
    public List<SwagCloudStorageVirusFound> foundViruses { get; set; }

    /**
     * Detailed error message if the operation was not successful
     * @return errorDetailedDescription
     */
    public String errorDetailedDescription { get; set; }

    /**
     * Size in bytes of the file that was retrieved and scanned
     * @return fileSize
     */
    public Long fileSize { get; set; }

    /**
     * Contains additional non-threat content verification information
     * @return contentInformation
     */
    public SwagAdditionalAdvancedScanInformatio contentInformation { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Successful' => 'successful',
        'CleanResult' => 'cleanResult',
        'ContainsExecutable' => 'containsExecutable',
        'ContainsInvalidFile' => 'containsInvalidFile',
        'ContainsScript' => 'containsScript',
        'ContainsPasswordProtectedFile' => 'containsPasswordProtectedFile',
        'ContainsRestrictedFileFormat' => 'containsRestrictedFileFormat',
        'ContainsMacros' => 'containsMacros',
        'VerifiedFileFormat' => 'verifiedFileFormat',
        'FoundViruses' => 'foundViruses',
        'ErrorDetailedDescription' => 'errorDetailedDescription',
        'FileSize' => 'fileSize',
        'ContentInformation' => 'contentInformation'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagCloudStorageAdvancedVirusScanRes() {
        foundViruses = new List<SwagCloudStorageVirusFound>();
    }

    public static SwagCloudStorageAdvancedVirusScanRes getExample() {
        SwagCloudStorageAdvancedVirusScanRes cloudStorageAdvancedVirusScanResult = new SwagCloudStorageAdvancedVirusScanRes();
        cloudStorageAdvancedVirusScanResult.successful = true;
        cloudStorageAdvancedVirusScanResult.cleanResult = true;
        cloudStorageAdvancedVirusScanResult.containsExecutable = true;
        cloudStorageAdvancedVirusScanResult.containsInvalidFile = true;
        cloudStorageAdvancedVirusScanResult.containsScript = true;
        cloudStorageAdvancedVirusScanResult.containsPasswordProtectedFile = true;
        cloudStorageAdvancedVirusScanResult.containsRestrictedFileFormat = true;
        cloudStorageAdvancedVirusScanResult.containsMacros = true;
        cloudStorageAdvancedVirusScanResult.verifiedFileFormat = 'aeiou';
        cloudStorageAdvancedVirusScanResult.foundViruses = new List<SwagCloudStorageVirusFound>{SwagCloudStorageVirusFound.getExample()};
        cloudStorageAdvancedVirusScanResult.errorDetailedDescription = 'aeiou';
        cloudStorageAdvancedVirusScanResult.fileSize = 123456789L;
        cloudStorageAdvancedVirusScanResult.contentInformation = SwagAdditionalAdvancedScanInformatio.getExample();
        return cloudStorageAdvancedVirusScanResult;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagCloudStorageAdvancedVirusScanRes) {
            SwagCloudStorageAdvancedVirusScanRes cloudStorageAdvancedVirusScanResult = (SwagCloudStorageAdvancedVirusScanRes) obj;
            return this.successful == cloudStorageAdvancedVirusScanResult.successful
                && this.cleanResult == cloudStorageAdvancedVirusScanResult.cleanResult
                && this.containsExecutable == cloudStorageAdvancedVirusScanResult.containsExecutable
                && this.containsInvalidFile == cloudStorageAdvancedVirusScanResult.containsInvalidFile
                && this.containsScript == cloudStorageAdvancedVirusScanResult.containsScript
                && this.containsPasswordProtectedFile == cloudStorageAdvancedVirusScanResult.containsPasswordProtectedFile
                && this.containsRestrictedFileFormat == cloudStorageAdvancedVirusScanResult.containsRestrictedFileFormat
                && this.containsMacros == cloudStorageAdvancedVirusScanResult.containsMacros
                && this.verifiedFileFormat == cloudStorageAdvancedVirusScanResult.verifiedFileFormat
                && this.foundViruses == cloudStorageAdvancedVirusScanResult.foundViruses
                && this.errorDetailedDescription == cloudStorageAdvancedVirusScanResult.errorDetailedDescription
                && this.fileSize == cloudStorageAdvancedVirusScanResult.fileSize
                && this.contentInformation == cloudStorageAdvancedVirusScanResult.contentInformation;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (successful == null ? 0 : System.hashCode(successful));
        hashCode = (17 * hashCode) + (cleanResult == null ? 0 : System.hashCode(cleanResult));
        hashCode = (17 * hashCode) + (containsExecutable == null ? 0 : System.hashCode(containsExecutable));
        hashCode = (17 * hashCode) + (containsInvalidFile == null ? 0 : System.hashCode(containsInvalidFile));
        hashCode = (17 * hashCode) + (containsScript == null ? 0 : System.hashCode(containsScript));
        hashCode = (17 * hashCode) + (containsPasswordProtectedFile == null ? 0 : System.hashCode(containsPasswordProtectedFile));
        hashCode = (17 * hashCode) + (containsRestrictedFileFormat == null ? 0 : System.hashCode(containsRestrictedFileFormat));
        hashCode = (17 * hashCode) + (containsMacros == null ? 0 : System.hashCode(containsMacros));
        hashCode = (17 * hashCode) + (verifiedFileFormat == null ? 0 : System.hashCode(verifiedFileFormat));
        hashCode = (17 * hashCode) + (foundViruses == null ? 0 : System.hashCode(foundViruses));
        hashCode = (17 * hashCode) + (errorDetailedDescription == null ? 0 : System.hashCode(errorDetailedDescription));
        hashCode = (17 * hashCode) + (fileSize == null ? 0 : System.hashCode(fileSize));
        hashCode = (17 * hashCode) + (contentInformation == null ? 0 : System.hashCode(contentInformation));
        return hashCode;
    }
}

