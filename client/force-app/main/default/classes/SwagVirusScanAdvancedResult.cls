/*
 * virusapi
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of running an advanced virus scan
 */
public class SwagVirusScanAdvancedResult implements Swagger.MappedProperties {
    /**
     * True if the scan contained no viruses, false otherwise
     * @return cleanResult
     */
    public Boolean cleanResult { get; set; }

    /**
     * True if the scan contained an executable (application code), which can be a significant risk factor
     * @return containsExecutable
     */
    public Boolean containsExecutable { get; set; }

    /**
     * True if the scan contained an invalid file (such as a PDF that is not a valid PDF, Word Document that is not a valid Word Document, etc.), which can be a significant risk factor
     * @return containsInvalidFile
     */
    public Boolean containsInvalidFile { get; set; }

    /**
     * True if the scan contained a script (such as a PHP script, Python script, etc.) which can be a significant risk factor
     * @return containsScript
     */
    public Boolean containsScript { get; set; }

    /**
     * True if the scan contained a password protected or encrypted file, which can be a significant risk factor
     * @return containsPasswordProtectedFile
     */
    public Boolean containsPasswordProtectedFile { get; set; }

    /**
     * True if the uploaded file is of a type that is not allowed based on the optional restrictFileTypes parameter, false otherwise; if restrictFileTypes is not set, this will always be false
     * @return containsRestrictedFileFormat
     */
    public Boolean containsRestrictedFileFormat { get; set; }

    /**
     * True if the uploaded file contains embedded Macros of other embedded threats within the document, which can be a significant risk factor
     * @return containsMacros
     */
    public Boolean containsMacros { get; set; }

    /**
     * True if the uploaded file contains embedded XML External Entity threats of other embedded threats within the document, which can be a significant risk factor
     * @return containsXmlExternalEntities
     */
    public Boolean containsXmlExternalEntities { get; set; }

    /**
     * For file format verification-supported file formats, the contents-verified file format of the file.  Null indicates that the file format is not supported for contents verification.  If a Virus or Malware is found, this field will always be set to Null.
     * @return verifiedFileFormat
     */
    public String verifiedFileFormat { get; set; }

    /**
     * Array of viruses found, if any
     * @return foundViruses
     */
    public List<SwagVirusFound> foundViruses { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'CleanResult' => 'cleanResult',
        'ContainsExecutable' => 'containsExecutable',
        'ContainsInvalidFile' => 'containsInvalidFile',
        'ContainsScript' => 'containsScript',
        'ContainsPasswordProtectedFile' => 'containsPasswordProtectedFile',
        'ContainsRestrictedFileFormat' => 'containsRestrictedFileFormat',
        'ContainsMacros' => 'containsMacros',
        'ContainsXmlExternalEntities' => 'containsXmlExternalEntities',
        'VerifiedFileFormat' => 'verifiedFileFormat',
        'FoundViruses' => 'foundViruses'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagVirusScanAdvancedResult() {
        foundViruses = new List<SwagVirusFound>();
    }

    public static SwagVirusScanAdvancedResult getExample() {
        SwagVirusScanAdvancedResult virusScanAdvancedResult = new SwagVirusScanAdvancedResult();
        virusScanAdvancedResult.cleanResult = true;
        virusScanAdvancedResult.containsExecutable = true;
        virusScanAdvancedResult.containsInvalidFile = true;
        virusScanAdvancedResult.containsScript = true;
        virusScanAdvancedResult.containsPasswordProtectedFile = true;
        virusScanAdvancedResult.containsRestrictedFileFormat = true;
        virusScanAdvancedResult.containsMacros = true;
        virusScanAdvancedResult.containsXmlExternalEntities = true;
        virusScanAdvancedResult.verifiedFileFormat = 'aeiou';
        virusScanAdvancedResult.foundViruses = new List<SwagVirusFound>{SwagVirusFound.getExample()};
        return virusScanAdvancedResult;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagVirusScanAdvancedResult) {
            SwagVirusScanAdvancedResult virusScanAdvancedResult = (SwagVirusScanAdvancedResult) obj;
            return this.cleanResult == virusScanAdvancedResult.cleanResult
                && this.containsExecutable == virusScanAdvancedResult.containsExecutable
                && this.containsInvalidFile == virusScanAdvancedResult.containsInvalidFile
                && this.containsScript == virusScanAdvancedResult.containsScript
                && this.containsPasswordProtectedFile == virusScanAdvancedResult.containsPasswordProtectedFile
                && this.containsRestrictedFileFormat == virusScanAdvancedResult.containsRestrictedFileFormat
                && this.containsMacros == virusScanAdvancedResult.containsMacros
                && this.containsXmlExternalEntities == virusScanAdvancedResult.containsXmlExternalEntities
                && this.verifiedFileFormat == virusScanAdvancedResult.verifiedFileFormat
                && this.foundViruses == virusScanAdvancedResult.foundViruses;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (cleanResult == null ? 0 : System.hashCode(cleanResult));
        hashCode = (17 * hashCode) + (containsExecutable == null ? 0 : System.hashCode(containsExecutable));
        hashCode = (17 * hashCode) + (containsInvalidFile == null ? 0 : System.hashCode(containsInvalidFile));
        hashCode = (17 * hashCode) + (containsScript == null ? 0 : System.hashCode(containsScript));
        hashCode = (17 * hashCode) + (containsPasswordProtectedFile == null ? 0 : System.hashCode(containsPasswordProtectedFile));
        hashCode = (17 * hashCode) + (containsRestrictedFileFormat == null ? 0 : System.hashCode(containsRestrictedFileFormat));
        hashCode = (17 * hashCode) + (containsMacros == null ? 0 : System.hashCode(containsMacros));
        hashCode = (17 * hashCode) + (containsXmlExternalEntities == null ? 0 : System.hashCode(containsXmlExternalEntities));
        hashCode = (17 * hashCode) + (verifiedFileFormat == null ? 0 : System.hashCode(verifiedFileFormat));
        hashCode = (17 * hashCode) + (foundViruses == null ? 0 : System.hashCode(foundViruses));
        return hashCode;
    }
}

